// Generated by view binder compiler. Do not edit!
package com.dicoding.picodiploma.pan.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.dicoding.picodiploma.pan.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityConditionBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView condition;

  @NonNull
  public final ImageView emoticon;

  @NonNull
  public final TextView hi;

  @NonNull
  public final CardView journalCheck;

  @NonNull
  public final ConstraintLayout main;

  @NonNull
  public final TextView name;

  @NonNull
  public final TextView yourCondition;

  private ActivityConditionBinding(@NonNull ConstraintLayout rootView, @NonNull TextView condition,
      @NonNull ImageView emoticon, @NonNull TextView hi, @NonNull CardView journalCheck,
      @NonNull ConstraintLayout main, @NonNull TextView name, @NonNull TextView yourCondition) {
    this.rootView = rootView;
    this.condition = condition;
    this.emoticon = emoticon;
    this.hi = hi;
    this.journalCheck = journalCheck;
    this.main = main;
    this.name = name;
    this.yourCondition = yourCondition;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityConditionBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityConditionBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_condition, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityConditionBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.condition;
      TextView condition = ViewBindings.findChildViewById(rootView, id);
      if (condition == null) {
        break missingId;
      }

      id = R.id.emoticon;
      ImageView emoticon = ViewBindings.findChildViewById(rootView, id);
      if (emoticon == null) {
        break missingId;
      }

      id = R.id.hi;
      TextView hi = ViewBindings.findChildViewById(rootView, id);
      if (hi == null) {
        break missingId;
      }

      id = R.id.journalCheck;
      CardView journalCheck = ViewBindings.findChildViewById(rootView, id);
      if (journalCheck == null) {
        break missingId;
      }

      ConstraintLayout main = (ConstraintLayout) rootView;

      id = R.id.name;
      TextView name = ViewBindings.findChildViewById(rootView, id);
      if (name == null) {
        break missingId;
      }

      id = R.id.your_condition;
      TextView yourCondition = ViewBindings.findChildViewById(rootView, id);
      if (yourCondition == null) {
        break missingId;
      }

      return new ActivityConditionBinding((ConstraintLayout) rootView, condition, emoticon, hi,
          journalCheck, main, name, yourCondition);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
