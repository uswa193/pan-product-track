# -*- coding: utf-8 -*-
"""Load Model Bert-Gem.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NwCz3VzZkgWKLk-u_Y-qCvc6m2O_H_FO

#HealChat
"""

!pip install -q -U google-generativeai

import pathlib
import textwrap

import google.generativeai as genai

from IPython.display import display
from IPython.display import Markdown


def to_markdown(text):
  text = text.replace('â€¢', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

#run to clear out history
history = []

def join_list(list1):
  kalimat = " ".join(list1)
  return kalimat

"""Integrating with Gemini"""

# Used to securely store your API key
from google.colab import userdata

GOOGLE_API_KEY=userdata.get('GOOGLE_API_KEY')

genai.configure(api_key=GOOGLE_API_KEY)

model_gemini = genai.GenerativeModel('gemini-1.5-pro')

"""Integrating Emotion Classification & Gemini"""

#Run to predict user input
text = input('Ceritakan Harimu:')
history.append(text)

#Run to generate response
prompt = "" #input specific prompt
response = model_gemini.generate_content(f"Anggap dia temanmu yang sedang bercerita. Dia bercerita/membalas kalau {text}. Respon dia sebagai teman. Jangan gunakan bahasa yang terlalu kaku dan jangan terlalu panjang. List berikut adalah chat dia dengan mu {history}")
to_markdown(response.text)

history

join_list(history)

"""#Check"""

import numpy as np
import tensorflow as tf
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.preprocessing.text import tokenizer_from_json
import json
from sklearn.preprocessing import LabelEncoder
from google.colab import drive

#Load model
drive.mount('/content/drive')

# Muat model dan tokenizer dari Google Drive
model_path = '/content/drive/My Drive/Github/Fix_Github/Emotion Classification/model'
tokenizer_path = '/content/drive/My Drive/Github/Fix_Github/Emotion Classification/tokenizer'

from transformers import pipeline

# Gunakan model dan tokenizer yang dimuat dari Google Drive
nlp = pipeline(
    "sentiment-analysis",
    model=model_path,
    tokenizer=tokenizer_path,
    return_all_scores=True
)

label_mapping = {'Marah': 'marah', 'Takut': 'takut', 'Senang': 'senang', 'Cinta': 'cinta', 'Sedih': 'sedih'}

# Fungsi untuk menyimpan probabilitas label
def predict_text_probabilities(hasil_nlp,text):
    mapped_probabilities = {}
    for item in hasil_nlp[0]:  # Assuming we only need the first set of predictions
        label = item['label']
        score = item['score']
        mapped_probabilities[label_mapping[label]] = score

    return mapped_probabilities

text = join_list(history)
probabilities = predict_text_probabilities(nlp(text),text)
for label, prob in probabilities.items():
    print(f"{label}: {prob:.4f}")

max_emotion = max(probabilities, key=probabilities.get)
max_emotion_prob = probabilities[max_emotion]
print(f"\nEmosi pengguna: {max_emotion} ({max_emotion_prob:.4f})")

"""**Activity A**"""

#Run to generate response
prompt = "" #input specific prompt
response = model_gemini.generate_content(f"User kita sedang dalam keadaan {max_emotion} dengan probabilisitas {max_emotion_prob}.  Berikan 3 rekomendasi aktivitas untuknya tanpa kata kata penyemangat output hanya 3 aktivitas saja")
to_markdown(response.text)

"""**Activity B**


"""

import random
import json

recommended_activities = {
    "sedih": [
        {"title": "Olahraga", "description": "Pergi berjalan, berlari, atau lakukan latihan di rumah."},
        {"title": "Mendengarkan Musik", "description": "Dengarkan musik yang membangkitkan semangat atau menenangkan."},
        {"title": "Bicara dengan Seseorang", "description": "Bagikan perasaan Anda dengan teman atau anggota keluarga."},
        {"title": "Terlibat dalam Hobi", "description": "Lakukan sesuatu yang Anda nikmati, seperti membaca, melukis, atau berkebun."},
        {"title": "Menulis di Jurnal", "description": "Ungkapkan pikiran dan perasaan Anda di atas kertas."}
    ],
    "senang": [
        {"title": "Merayakan", "description": "Bagikan kebahagiaan Anda dengan teman dan keluarga."},
        {"title": "Olahraga", "description": "Salurkan energi positif Anda ke dalam aktivitas fisik."},
        {"title": "Berkegiatan Sosial", "description": "Gunakan suasana hati positif Anda untuk membantu orang lain."},
        {"title": "Buat Sesuatu", "description": "Salurkan kebahagiaan Anda ke dalam aktivitas kreatif seperti menggambar, memasak, atau membuat kerajinan."},
        {"title": "Menghabiskan Waktu di Luar Ruangan", "description": "Nikmati berjalan di alam, pergi ke pantai, atau berpiknik."}
    ],
    "takut": [
        {"title": "Latihan Pernapasan Dalam", "description": "Lakukan latihan pernapasan dalam untuk menenangkan pikiran Anda."},
        {"title": "Meditasi Kesadaran", "description": "Fokus pada momen saat ini untuk mengurangi kecemasan."},
        {"title": "Hadapi Ketakutan Anda", "description": "Secara bertahap hadapi sumber ketakutan Anda dalam langkah-langkah kecil yang dapat diatasi."},
        {"title": "Bicarakan", "description": "Diskusikan ketakutan Anda dengan teman terpercaya atau terapis."},
        {"title": "Aktivitas Fisik", "description": "Lakukan aktivitas seperti yoga, tai chi, atau berjalan cepat untuk mengurangi stres."}
    ],
    "cinta": [
        {"title": "Menghabiskan Waktu Berkualitas", "description": "Rencanakan kencan atau aktivitas spesial dengan orang yang Anda cintai."},
        {"title": "Ekspresikan Rasa Syukur", "description": "Tulis surat atau catatan untuk mengungkapkan penghargaan."},
        {"title": "Lakukan Sesuatu yang Baik", "description": "Lakukan tindakan kebaikan untuk seseorang yang Anda pedulikan."},
        {"title": "Masak Bersama", "description": "Nikmati memasak dan berbagi makanan bersama orang tercinta."},
        {"title": "Terlibat dalam Kegiatan Bersama", "description": "Ikuti hobi atau aktivitas yang Anda berdua nikmati."}
    ],
    "marah": [
        {"title": "Aktivitas Fisik", "description": "Lepaskan energi terpendam melalui olahraga atau permainan."},
        {"title": "Pernapasan Dalam", "description": "Lakukan latihan pernapasan dalam atau relaksasi otot progresif."},
        {"title": "Saluran Kreatif", "description": "Salurkan kemarahan Anda ke dalam seni, musik, atau menulis."},
        {"title": "Waktu Sendiri", "description": "Ambil jeda dari situasi untuk menenangkan diri."},
        {"title": "Bicarakan", "description": "Diskusikan perasaan Anda dengan seseorang yang Anda percaya untuk mendapatkan perspektif."}
    ]
}

# Save the dictionary to a JSON file
with open('/content/recommended_activities.json', 'w') as json_file:
    json.dump(recommended_activities, json_file, indent=4)

# Load the JSON file
with open('/content/recommended_activities.json', 'r') as json_file:
    recommended_activities = json.load(json_file)

if max_emotion in recommended_activities:
    selected_activities = random.sample(recommended_activities[max_emotion], 3)
    num = 1
    # Format selected activities in Markdown
    print(f"Recommendations for {max_emotion}:\n")
    for activity in selected_activities:

      print(f"{num}. {activity['title']}\n{activity['description']}\n")
      num += 1
else:
    print("No recommendations available for the given emotion.")